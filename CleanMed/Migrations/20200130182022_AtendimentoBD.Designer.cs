// <auto-generated />
using System;
using CleanMed.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CleanMed.Migrations
{
    [DbContext(typeof(Contexto))]
    [Migration("20200130182022_AtendimentoBD")]
    partial class AtendimentoBD
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CleanMed.Models.AgendaMedica", b =>
                {
                    b.Property<int>("AgendaMedicaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataAgenda")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataLiberacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DtCadastro")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("HoraFim")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("HoraInicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("Observacao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PrestadorId")
                        .HasColumnType("int");

                    b.Property<int>("QtAtendimento")
                        .HasColumnType("int");

                    b.Property<int>("QtEncaixe")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("QtTempoMedio")
                        .HasColumnType("time");

                    b.Property<int?>("RecursoAgendamentoId")
                        .HasColumnType("int");

                    b.Property<int?>("SetorId")
                        .HasColumnType("int");

                    b.Property<bool>("StatusAgenda")
                        .HasColumnType("bit");

                    b.Property<string>("ThemeColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoAgenda")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AgendaMedicaId");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("PrestadorId");

                    b.HasIndex("RecursoAgendamentoId");

                    b.HasIndex("SetorId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("AgendasMedicas");
                });

            modelBuilder.Entity("CleanMed.Models.Agendamento", b =>
                {
                    b.Property<int>("AgendamentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgendaMedicaId")
                        .HasColumnType("int");

                    b.Property<int?>("AtendimentoId")
                        .HasColumnType("int");

                    b.Property<bool>("Bloqueado")
                        .HasColumnType("bit");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ConvenioId")
                        .HasColumnType("int");

                    b.Property<DateTime>("HoraAgenda")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ItemAgendamentoId")
                        .HasColumnType("int");

                    b.Property<int?>("MotivoCancelamentoId")
                        .HasColumnType("int");

                    b.Property<string>("ObservacaoAgendamento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PacienteId")
                        .HasColumnType("int");

                    b.Property<int>("Qtpeso")
                        .HasColumnType("int");

                    b.Property<bool?>("SNEncaixe")
                        .HasColumnType("bit");

                    b.Property<string>("StatusAgendamento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VlAltura")
                        .HasColumnType("int");

                    b.HasKey("AgendamentoId");

                    b.HasIndex("AgendaMedicaId");

                    b.HasIndex("ConvenioId");

                    b.HasIndex("ItemAgendamentoId");

                    b.HasIndex("MotivoCancelamentoId");

                    b.HasIndex("PacienteId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Agendamentos");
                });

            modelBuilder.Entity("CleanMed.Models.AgendamentoLog", b =>
                {
                    b.Property<int>("AgendamentoLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Acao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AgendamentoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Dt_Acao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Observacao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PacienteId")
                        .HasColumnType("int");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AgendamentoLogId");

                    b.HasIndex("AgendamentoId");

                    b.HasIndex("PacienteId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("AgendamentoLogs");
                });

            modelBuilder.Entity("CleanMed.Models.Atendimento", b =>
                {
                    b.Property<int>("AtendimentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConvenioId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAtendimento")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("HoraAtendimento")
                        .HasColumnType("datetime2");

                    b.Property<int>("MyProperty")
                        .HasColumnType("int");

                    b.Property<string>("NrCarteira")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PacienteId")
                        .HasColumnType("int");

                    b.Property<int?>("PrestadorId")
                        .HasColumnType("int");

                    b.Property<string>("PrioridadeAtendimento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SetorId")
                        .HasColumnType("int");

                    b.Property<bool?>("SnAcompanhante")
                        .HasColumnType("bit");

                    b.Property<bool?>("SnEmAtendimento")
                        .HasColumnType("bit");

                    b.Property<bool?>("SnRetorno")
                        .HasColumnType("bit");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AtendimentoId");

                    b.HasIndex("ConvenioId");

                    b.HasIndex("PacienteId");

                    b.HasIndex("PrestadorId");

                    b.HasIndex("SetorId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Atendimentos");
                });

            modelBuilder.Entity("CleanMed.Models.CartaoConvenio", b =>
                {
                    b.Property<int>("CartaoConvenioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConvenioId")
                        .HasColumnType("int");

                    b.Property<string>("NumeroCarteira")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<int>("PacienteId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Validade")
                        .HasColumnType("date");

                    b.HasKey("CartaoConvenioId");

                    b.HasIndex("ConvenioId");

                    b.HasIndex("PacienteId");

                    b.ToTable("CartaoConvenios");
                });

            modelBuilder.Entity("CleanMed.Models.Cep", b =>
                {
                    b.Property<int>("CepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Complemento")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("UF")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("CepId");

                    b.ToTable("Cep");
                });

            modelBuilder.Entity("CleanMed.Models.ConfirmacaoAgendamento", b =>
                {
                    b.Property<int>("ConfirmacaoAgendamentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgendamentoId")
                        .HasColumnType("int");

                    b.Property<string>("Nomecontato")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObservacaoConfirmacao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoConfirmacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConfirmacaoAgendamentoId");

                    b.HasIndex("AgendamentoId");

                    b.ToTable("ConfirmacaoAgendamentos");
                });

            modelBuilder.Entity("CleanMed.Models.Conselho", b =>
                {
                    b.Property<int>("ConselhoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("ConselhoId");

                    b.ToTable("Conselhos");
                });

            modelBuilder.Entity("CleanMed.Models.Contato", b =>
                {
                    b.Property<int>("ContatoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(160)")
                        .HasMaxLength(160);

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(160)")
                        .HasMaxLength(160);

                    b.Property<int>("PacienteId")
                        .HasColumnType("int");

                    b.Property<string>("Parentesco")
                        .HasColumnType("nvarchar(160)")
                        .HasMaxLength(160);

                    b.Property<string>("Telefone1")
                        .HasColumnType("nvarchar(160)")
                        .HasMaxLength(160);

                    b.Property<string>("Telefone2")
                        .HasColumnType("nvarchar(160)")
                        .HasMaxLength(160);

                    b.HasKey("ContatoId");

                    b.HasIndex("PacienteId");

                    b.ToTable("Contatos");
                });

            modelBuilder.Entity("CleanMed.Models.Convenio", b =>
                {
                    b.Property<int>("ConvenioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasColumnType("nvarchar(160)")
                        .HasMaxLength(160);

                    b.Property<int?>("CartaoConvenioId")
                        .HasColumnType("int");

                    b.Property<int?>("CepId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DtAlteracao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DtCadastro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InscricaoEstadual")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InscricaoMunicipal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(160)")
                        .HasMaxLength(160);

                    b.Property<string>("Numero")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasColumnType("nvarchar(160)")
                        .HasMaxLength(160);

                    b.Property<string>("RegistroAns")
                        .IsRequired()
                        .HasColumnType("nvarchar(160)")
                        .HasMaxLength(160);

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Telefone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConvenioId");

                    b.HasIndex("CNPJ");

                    b.HasIndex("CartaoConvenioId");

                    b.HasIndex("CepId");

                    b.ToTable("Convenios");
                });

            modelBuilder.Entity("CleanMed.Models.ConvenioAgendaMedica", b =>
                {
                    b.Property<int>("ConvenioId")
                        .HasColumnType("int");

                    b.Property<int>("AgendaMedicaId")
                        .HasColumnType("int");

                    b.HasKey("ConvenioId", "AgendaMedicaId");

                    b.HasIndex("AgendaMedicaId");

                    b.ToTable("ConveniosAgendasMedica");
                });

            modelBuilder.Entity("CleanMed.Models.Empresa", b =>
                {
                    b.Property<int>("EmpresaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CNES")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CepId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DtCadastro")
                        .HasColumnType("datetime2");

                    b.Property<string>("InscricaoEstadual")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InscricaoMunicipal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomeFantasia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Numero")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Telefone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Unidade")
                        .HasColumnType("bit");

                    b.HasKey("EmpresaId");

                    b.HasIndex("CNPJ")
                        .IsUnique();

                    b.HasIndex("CepId");

                    b.ToTable("Empresas");
                });

            modelBuilder.Entity("CleanMed.Models.Especialidade", b =>
                {
                    b.Property<int>("EspecialidadeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("EspecialidadeId");

                    b.ToTable("Especialidades");
                });

            modelBuilder.Entity("CleanMed.Models.Exame", b =>
                {
                    b.Property<int>("ExameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(160)")
                        .HasMaxLength(160);

                    b.Property<int?>("DiaEntrega")
                        .HasColumnType("int");

                    b.Property<int?>("EspecialidadeId")
                        .HasColumnType("int");

                    b.Property<string>("Mnemonico")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreparoExame")
                        .HasColumnType("text");

                    b.Property<int?>("SetorId")
                        .HasColumnType("int");

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ExameId");

                    b.HasIndex("EspecialidadeId");

                    b.HasIndex("SetorId");

                    b.ToTable("Exames");
                });

            modelBuilder.Entity("CleanMed.Models.GrupoFaturamento", b =>
                {
                    b.Property<int>("GrupoFaturamentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GrupoFaturamentoId");

                    b.ToTable("GrupoFaturamentos");
                });

            modelBuilder.Entity("CleanMed.Models.ItemAgendaMedica", b =>
                {
                    b.Property<int>("ItemAgendamentoId")
                        .HasColumnType("int");

                    b.Property<int>("AgendaMedicaId")
                        .HasColumnType("int");

                    b.HasKey("ItemAgendamentoId", "AgendaMedicaId");

                    b.HasIndex("AgendaMedicaId");

                    b.ToTable("ItensAgendasMedica");
                });

            modelBuilder.Entity("CleanMed.Models.ItemAgendamento", b =>
                {
                    b.Property<int>("ItemAgendamentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExameId")
                        .HasColumnType("int");

                    b.Property<int?>("RecursoAgendamentoId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ItemAgendamentoId");

                    b.HasIndex("ExameId");

                    b.HasIndex("RecursoAgendamentoId");

                    b.ToTable("ItemAgendamentos");
                });

            modelBuilder.Entity("CleanMed.Models.ItemAgendamentoPrestador", b =>
                {
                    b.Property<int>("PrestadorId")
                        .HasColumnType("int");

                    b.Property<int>("ItemAgendamentoId")
                        .HasColumnType("int");

                    b.HasKey("PrestadorId", "ItemAgendamentoId");

                    b.HasIndex("ItemAgendamentoId");

                    b.ToTable("ItemAgendamentoPrestadores");
                });

            modelBuilder.Entity("CleanMed.Models.MotivoCancelamento", b =>
                {
                    b.Property<int>("MotivoCancelamentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MotivoCancelamentoId");

                    b.ToTable("MotivoCancelamentos");

                    b.HasData(
                        new
                        {
                            MotivoCancelamentoId = 1,
                            Descricao = "CANCELADO PELO PACIENTE"
                        },
                        new
                        {
                            MotivoCancelamentoId = 2,
                            Descricao = "CANCELADO PELO MÉDICO(A)"
                        },
                        new
                        {
                            MotivoCancelamentoId = 3,
                            Descricao = "PACIENTE NÃO COMPARECEU"
                        },
                        new
                        {
                            MotivoCancelamentoId = 4,
                            Descricao = "OBITO DO PACIENTE"
                        },
                        new
                        {
                            MotivoCancelamentoId = 5,
                            Descricao = "ERRO DE DIGITACAO"
                        },
                        new
                        {
                            MotivoCancelamentoId = 6,
                            Descricao = "GUIA NÃO AUTORIZADA"
                        });
                });

            modelBuilder.Entity("CleanMed.Models.NiveisAcesso", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("NiveisAcessos");
                });

            modelBuilder.Entity("CleanMed.Models.Paciente", b =>
                {
                    b.Property<int>("PacienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CPF")
                        .HasColumnType("nvarchar(16)")
                        .HasMaxLength(16);

                    b.Property<int?>("CartaoConvenioId")
                        .HasColumnType("int");

                    b.Property<int?>("CepId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<string>("Estado_Civil")
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(160)")
                        .HasMaxLength(160);

                    b.Property<string>("Numero")
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.Property<string>("RG")
                        .HasColumnType("nvarchar(14)")
                        .HasMaxLength(14);

                    b.Property<bool>("SemCPF")
                        .HasColumnType("bit");

                    b.Property<string>("Sexo")
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<bool>("StatusId")
                        .HasColumnName("StatusId")
                        .HasColumnType("bit");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<DateTime>("dt_cadastro")
                        .HasColumnType("datetime2");

                    b.HasKey("PacienteId");

                    b.HasIndex("CPF")
                        .IsUnique()
                        .HasFilter("[CPF] IS NOT NULL");

                    b.HasIndex("CartaoConvenioId");

                    b.HasIndex("CepId");

                    b.ToTable("Pacientes");
                });

            modelBuilder.Entity("CleanMed.Models.Prestador", b =>
                {
                    b.Property<int>("PrestadorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("nvarchar(16)")
                        .HasMaxLength(16);

                    b.Property<int?>("CepId")
                        .HasColumnType("int");

                    b.Property<int>("ConselhoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("Date");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(160)")
                        .HasMaxLength(160);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(160)")
                        .HasMaxLength(160);

                    b.Property<string>("Numero")
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.Property<string>("NumeroCrm")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Sexo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Telefone")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int>("TipoPrestadorId")
                        .HasColumnType("int");

                    b.HasKey("PrestadorId");

                    b.HasIndex("CPF");

                    b.HasIndex("CepId");

                    b.HasIndex("ConselhoId");

                    b.HasIndex("NumeroCrm");

                    b.HasIndex("TipoPrestadorId");

                    b.ToTable("Prestadores");
                });

            modelBuilder.Entity("CleanMed.Models.PrestadorEspecialidade", b =>
                {
                    b.Property<int>("PrestadorId")
                        .HasColumnType("int");

                    b.Property<int>("EspecialidadeId")
                        .HasColumnType("int");

                    b.HasKey("PrestadorId", "EspecialidadeId");

                    b.HasIndex("EspecialidadeId");

                    b.ToTable("PrestadoresEspecialidades");
                });

            modelBuilder.Entity("CleanMed.Models.Procedimento", b =>
                {
                    b.Property<int>("ProcedimentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GrupoFaturamentoId")
                        .HasColumnType("int");

                    b.Property<int?>("IdadeMaxima")
                        .HasColumnType("int");

                    b.Property<int?>("IdadeMinima")
                        .HasColumnType("int");

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProcedimentoId");

                    b.HasIndex("GrupoFaturamentoId");

                    b.ToTable("Procedimentos");
                });

            modelBuilder.Entity("CleanMed.Models.RecursoAgendamento", b =>
                {
                    b.Property<int>("RecursoAgendamentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)")
                        .HasMaxLength(4);

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RecursoAgendamentoId");

                    b.ToTable("RecursoAgendamentos");
                });

            modelBuilder.Entity("CleanMed.Models.Setor", b =>
                {
                    b.Property<int>("SetorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(160)")
                        .HasMaxLength(160);

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("TipoSetor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SetorId");

                    b.ToTable("Setores");
                });

            modelBuilder.Entity("CleanMed.Models.SobreUsuario", b =>
                {
                    b.Property<int>("SobreUsuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CepId")
                        .HasColumnType("int");

                    b.Property<string>("Formacao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Foto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SobreUsuarioId");

                    b.HasIndex("CepId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("SobreUsuarios");
                });

            modelBuilder.Entity("CleanMed.Models.TabelaFatuProcedimento", b =>
                {
                    b.Property<int>("TabelaFatuProcedimentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataVigencia")
                        .HasColumnType("date");

                    b.Property<int>("ProcedimentoId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TabelaFaturamentoId")
                        .HasColumnType("int");

                    b.Property<decimal>("ValorTotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("TabelaFatuProcedimentoId");

                    b.HasIndex("ProcedimentoId");

                    b.HasIndex("TabelaFaturamentoId");

                    b.ToTable("TabelaFatuProcedimentos");
                });

            modelBuilder.Entity("CleanMed.Models.TabelaFaturamento", b =>
                {
                    b.Property<int>("TabelaFaturamentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConvenioId")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TabelaFaturamentoId");

                    b.HasIndex("ConvenioId");

                    b.ToTable("TabelaFaturamentos");
                });

            modelBuilder.Entity("CleanMed.Models.TipoPrestador", b =>
                {
                    b.Property<int>("TipoPrestadorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("TipoPrestadorId");

                    b.ToTable("TipoPrestadores");
                });

            modelBuilder.Entity("CleanMed.Models.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("nvarchar(14)")
                        .HasMaxLength(14);

                    b.Property<int?>("CepId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("date");

                    b.Property<DateTime>("DtCadastro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Numero")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observacao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SetorId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Telefone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CPF")
                        .IsUnique();

                    b.HasIndex("CepId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("SetorId");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("CleanMed.Models.UsuarioEmpresa", b =>
                {
                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.HasKey("UsuarioId", "EmpresaId");

                    b.HasIndex("EmpresaId");

                    b.ToTable("UsuariosEmpresas");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CleanMed.Models.AgendaMedica", b =>
                {
                    b.HasOne("CleanMed.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId");

                    b.HasOne("CleanMed.Models.Prestador", "Prestador")
                        .WithMany()
                        .HasForeignKey("PrestadorId");

                    b.HasOne("CleanMed.Models.RecursoAgendamento", "RecursoAgendamento")
                        .WithMany()
                        .HasForeignKey("RecursoAgendamentoId");

                    b.HasOne("CleanMed.Models.Setor", "Setor")
                        .WithMany()
                        .HasForeignKey("SetorId");

                    b.HasOne("CleanMed.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("CleanMed.Models.Agendamento", b =>
                {
                    b.HasOne("CleanMed.Models.AgendaMedica", "AgendaMedica")
                        .WithMany()
                        .HasForeignKey("AgendaMedicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanMed.Models.Convenio", "Convenio")
                        .WithMany()
                        .HasForeignKey("ConvenioId");

                    b.HasOne("CleanMed.Models.ItemAgendamento", "ItemAgendamento")
                        .WithMany()
                        .HasForeignKey("ItemAgendamentoId");

                    b.HasOne("CleanMed.Models.MotivoCancelamento", "MotivoCancelamento")
                        .WithMany()
                        .HasForeignKey("MotivoCancelamentoId");

                    b.HasOne("CleanMed.Models.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId");

                    b.HasOne("CleanMed.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CleanMed.Models.AgendamentoLog", b =>
                {
                    b.HasOne("CleanMed.Models.Agendamento", "Agendamento")
                        .WithMany()
                        .HasForeignKey("AgendamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanMed.Models.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId");

                    b.HasOne("CleanMed.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("CleanMed.Models.Atendimento", b =>
                {
                    b.HasOne("CleanMed.Models.Convenio", "Convenio")
                        .WithMany()
                        .HasForeignKey("ConvenioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanMed.Models.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanMed.Models.Prestador", "Prestador")
                        .WithMany()
                        .HasForeignKey("PrestadorId");

                    b.HasOne("CleanMed.Models.Setor", "Setor")
                        .WithMany()
                        .HasForeignKey("SetorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanMed.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("CleanMed.Models.CartaoConvenio", b =>
                {
                    b.HasOne("CleanMed.Models.Convenio", "Convenio")
                        .WithMany()
                        .HasForeignKey("ConvenioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanMed.Models.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CleanMed.Models.ConfirmacaoAgendamento", b =>
                {
                    b.HasOne("CleanMed.Models.Agendamento", "Agendamento")
                        .WithMany()
                        .HasForeignKey("AgendamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CleanMed.Models.Contato", b =>
                {
                    b.HasOne("CleanMed.Models.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CleanMed.Models.Convenio", b =>
                {
                    b.HasOne("CleanMed.Models.CartaoConvenio", "cartaoConvenio")
                        .WithMany("Convenios")
                        .HasForeignKey("CartaoConvenioId");

                    b.HasOne("CleanMed.Models.Cep", "Cep")
                        .WithMany()
                        .HasForeignKey("CepId");
                });

            modelBuilder.Entity("CleanMed.Models.ConvenioAgendaMedica", b =>
                {
                    b.HasOne("CleanMed.Models.AgendaMedica", "AgendaMedica")
                        .WithMany("ConveniosAgendasMedica")
                        .HasForeignKey("AgendaMedicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanMed.Models.Convenio", "Convenio")
                        .WithMany("ConveniosAgendasMedica")
                        .HasForeignKey("ConvenioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CleanMed.Models.Empresa", b =>
                {
                    b.HasOne("CleanMed.Models.Cep", "Cep")
                        .WithMany()
                        .HasForeignKey("CepId");
                });

            modelBuilder.Entity("CleanMed.Models.Exame", b =>
                {
                    b.HasOne("CleanMed.Models.Especialidade", "Especialidade")
                        .WithMany()
                        .HasForeignKey("EspecialidadeId");

                    b.HasOne("CleanMed.Models.Setor", "Setor")
                        .WithMany()
                        .HasForeignKey("SetorId");
                });

            modelBuilder.Entity("CleanMed.Models.ItemAgendaMedica", b =>
                {
                    b.HasOne("CleanMed.Models.AgendaMedica", "AgendaMedica")
                        .WithMany("ItensAgendasMedica")
                        .HasForeignKey("AgendaMedicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanMed.Models.ItemAgendamento", "ItemAgendamento")
                        .WithMany("ItensAgendasMedica")
                        .HasForeignKey("ItemAgendamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CleanMed.Models.ItemAgendamento", b =>
                {
                    b.HasOne("CleanMed.Models.Exame", "Exame")
                        .WithMany()
                        .HasForeignKey("ExameId");

                    b.HasOne("CleanMed.Models.RecursoAgendamento", "RecursoAgendamento")
                        .WithMany()
                        .HasForeignKey("RecursoAgendamentoId");
                });

            modelBuilder.Entity("CleanMed.Models.ItemAgendamentoPrestador", b =>
                {
                    b.HasOne("CleanMed.Models.ItemAgendamento", "itemAgendamento")
                        .WithMany("ItemAgendamentoPrestadores")
                        .HasForeignKey("ItemAgendamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanMed.Models.Prestador", "Prestador")
                        .WithMany("ItemAgendamentoPrestadores")
                        .HasForeignKey("PrestadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CleanMed.Models.Paciente", b =>
                {
                    b.HasOne("CleanMed.Models.CartaoConvenio", "cartaoConvenio")
                        .WithMany("Pacientes")
                        .HasForeignKey("CartaoConvenioId");

                    b.HasOne("CleanMed.Models.Cep", "Cep")
                        .WithMany()
                        .HasForeignKey("CepId");
                });

            modelBuilder.Entity("CleanMed.Models.Prestador", b =>
                {
                    b.HasOne("CleanMed.Models.Cep", "Cep")
                        .WithMany()
                        .HasForeignKey("CepId");

                    b.HasOne("CleanMed.Models.Conselho", "Conselho")
                        .WithMany()
                        .HasForeignKey("ConselhoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanMed.Models.TipoPrestador", "TipoPrestador")
                        .WithMany()
                        .HasForeignKey("TipoPrestadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CleanMed.Models.PrestadorEspecialidade", b =>
                {
                    b.HasOne("CleanMed.Models.Especialidade", "Especialidade")
                        .WithMany("PrestadoresEspecialidades")
                        .HasForeignKey("EspecialidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanMed.Models.Prestador", "Prestador")
                        .WithMany("PrestadoresEspecialidades")
                        .HasForeignKey("PrestadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CleanMed.Models.Procedimento", b =>
                {
                    b.HasOne("CleanMed.Models.GrupoFaturamento", "GrupoFaturamento")
                        .WithMany()
                        .HasForeignKey("GrupoFaturamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CleanMed.Models.SobreUsuario", b =>
                {
                    b.HasOne("CleanMed.Models.Cep", "Cep")
                        .WithMany()
                        .HasForeignKey("CepId");

                    b.HasOne("CleanMed.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("CleanMed.Models.TabelaFatuProcedimento", b =>
                {
                    b.HasOne("CleanMed.Models.Procedimento", "Procedimento")
                        .WithMany()
                        .HasForeignKey("ProcedimentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanMed.Models.TabelaFaturamento", "TabelaFaturamento")
                        .WithMany()
                        .HasForeignKey("TabelaFaturamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CleanMed.Models.TabelaFaturamento", b =>
                {
                    b.HasOne("CleanMed.Models.Convenio", "Convenio")
                        .WithMany()
                        .HasForeignKey("ConvenioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CleanMed.Models.Usuario", b =>
                {
                    b.HasOne("CleanMed.Models.Cep", "Cep")
                        .WithMany()
                        .HasForeignKey("CepId");

                    b.HasOne("CleanMed.Models.Setor", "Setor")
                        .WithMany()
                        .HasForeignKey("SetorId");
                });

            modelBuilder.Entity("CleanMed.Models.UsuarioEmpresa", b =>
                {
                    b.HasOne("CleanMed.Models.Empresa", "Empresa")
                        .WithMany("UsuariosEmpresas")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanMed.Models.Usuario", "Usuario")
                        .WithMany("UsuariosEmpresas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("CleanMed.Models.NiveisAcesso", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CleanMed.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CleanMed.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("CleanMed.Models.NiveisAcesso", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanMed.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CleanMed.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
